port module WebServerMain exposing (..)

import Init
import Node exposing (Environment)
import Task exposing (Task)
import Stream
import Bytes exposing (Bytes)
import Process
import Dict exposing (Dict)
import HttpServer exposing (Request, Server)
import HttpServer.Response as Response exposing (Response)
import Url.Parser as P exposing ((</>), (<?>))
import Url exposing (Url)
import Url.Parser.Query as Query
import Json.Encode as E
import Json.Decode as D exposing (Decoder)
import Time


type DbGetPayload =
    AllUsers (Array String)

dbPayloadDecoder : Decoder DbGetPayload
dbPayloadDecoder =
    D.oneOf
        [ D.field "users" <| D.map AllUsers (D.array D.string)
        ]

type alias DbResponse =
    { requestId : Int
    , payload : DbGetPayload
    }


mkDbResponse : Int -> DbGetPayload -> DbResponse
mkDbResponse requestId payload =
    { requestId = requestId, payload = payload }


dbResponseDecoder : Decoder DbResponse
dbResponseDecoder =
    D.map2 mkDbResponse
        (D.field "requestId" D.int)
        (dbPayloadDecoder)

type alias RequestId = Int

port getDbData : E.Value -> Cmd msg
port gotDbData : (D.Value -> msg) -> Sub msg


type DbOperation = GetUsers

dbOperationEncoder : DbOperation -> E.Value
dbOperationEncoder operation =
    when operation is
        GetUsers -> E.string "getUsers"


getDbDataEncoder : { requestId : Int, operation : DbOperation } -> E.Value
getDbDataEncoder { requestId, operation } =
    E.object
        [ {key = "requestId", value = E.int requestId}
        , {key = "operation", value = dbOperationEncoder operation}
        ]

{-

echo ./src/WebServerMain.gren | entr -rc bash -c 'gren make ./src/WebServerMain.gren && PORT=3000 node app'
rg --type-add 'gren:*.gren' -t gren -t js --files | entr -rc bash -c 'gren make ./src/WebServerMain.gren --output=main.js && PORT=4000 node ./start.js'

 -}


red : String
red =
    "\u{001B}[31m"

yellow : String
yellow =
    "\u{001B}[33m"

blue : String
blue =
    "\u{001B}[34m"



reset : String
reset =
    "\u{001B}[0m"


puts : String -> Stream.Writable Bytes -> Task Never {}
puts str stdout =
    Stream.writeLineAsBytes str stdout
    |> Task.map (\_ -> {})
    |> Task.onError (\_ -> Task.succeed {})


type Route
    = Home
    | Blogs
    | Blog { id : Int, subSectionId : Maybe Int, other : Bool }
    | Users

routeParser : P.Parser (Route -> a) a
routeParser =
    P.oneOf
        [ P.map Home  (P.top)
        , P.map Blogs (P.s "blog")
        , P.map
            (\id subSectionId other ->
                Blog
                    { id = id
                    , subSectionId = Maybe.andThen String.toInt subSectionId
                    , other = when other is
                        Just "1" -> True
                        _ -> False
                    }
            )
            (P.s "blog" </> P.int <?> Query.string "q" <?> Query.string "r")
        , P.map Users (P.s "users")
        ]


urlToRoute : Url -> Maybe Route
urlToRoute url =
    let
        dropQuestion query
            = Just <|
                if String.startsWith "?" query then
                    String.dropFirst 1 query
                else
                    query
    in
    P.parse
        routeParser
        (when url.query is
            Nothing ->
                url
            Just query ->
                { url | query = dropQuestion query }
        )


type Status
    = StartingUp { port_ : Int }
    | StartingUpFailed
    | Running Server


type alias PendingRequest =
    { response : Response
    , startedAt : Time.Posix
    }

type alias Model =
    { status : Status
    , stdout : Stream.Writable Bytes
    , pendingRequests : Dict Int PendingRequest
    , nextRequestId : Int
    }


type Msg
    = ServerCreated (Result HttpServer.ServerError Server)
    | StartRequest { req : Request, res : Response }
    | HandleRequest { req : Request, res : Response, now : Time.Posix }
    | GotDbData D.Value
    | TimeOut RequestId

main : Node.Program Model Msg
main =
    Node.defineProgram
        { init = init
        , update = update
        , subscriptions = subscriptions
        }


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.batch
        [ gotDbData GotDbData
        , when model.status is
            StartingUp _ ->
                Sub.none
            StartingUpFailed ->
                Sub.none
            Running server ->
                HttpServer.onRequest server
                    (\req res -> StartRequest {req = req, res = res})
        ]

init : Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Init.awaitTask Node.getEnvironmentVariables <| \vars ->
    Init.await HttpServer.initialize <| \serverPermissions ->
        let
            port_ =
                Dict.get "PORT" vars
                |> Maybe.andThen String.toInt
                |> Maybe.withDefault 8080
        in
        Node.startProgram
            { model =
                { status = StartingUp { port_ = port_ }
                , stdout = env.stdout
                , pendingRequests = Dict.empty
                , nextRequestId = 1
                }
            , command =
                Task.attempt ServerCreated <|
                    HttpServer.createServer serverPermissions
                        { host = "localhost"
                        , port_ = port_
                        }
            }

printServerSuccess : Stream.Writable Bytes -> Cmd Msg
printServerSuccess stdout =
    Task.succeed stdout
    |> Task.andThen (\_ -> puts "Server created successfully" stdout)
    |> Task.andThen (\_ -> puts "wat" stdout)
    |> Task.execute

printServerSuccess2 : Stream.Writable Bytes -> Cmd Msg
printServerSuccess2 stdout =
    [ puts "Server created successfully"
    , puts "Now I will server requests"
    ]
    |> Array.map (\f -> f stdout)
    |> Task.sequence
    |> Task.execute


homeResponse : Response -> Response
homeResponse =
    Response.setBody "You requested: Home"


blogsResponse : Response -> Response
blogsResponse =
    Response.setBody "You requested: Blogs"


-- http -v localhost:4000/blog/1 q==42 r==1
blogResponse : { id : Int, subSectionId : Maybe Int, other : Bool } -> Response -> Response
blogResponse {id, subSectionId, other } =
    -- let _ = Debug.log "blogResponse" {id = id, subSectionId = subSectionId, other = other } in
    Response.setBody <|
        "You requested: Blog id "
        ++ String.fromInt id


serveRequest : { requestId : Int } -> Route -> Request -> Response -> Cmd Msg
serveRequest { requestId } route req res =
    when route is
        Home ->
            Response.send <| homeResponse res
        Blogs ->
            Response.send <| blogsResponse res
        Blog params ->
            Response.send <| blogResponse params res
        Users ->
            Cmd.batch
                [ getDbData <|
                        getDbDataEncoder
                            { requestId = requestId, operation = GetUsers }

                -- Ensures the connection always shuts down.
                -- The connection may not shutdown if there was a problem decoding the
                -- DB response for example.
                , Process.sleep 5000
                    |> Task.perform (\{} -> TimeOut requestId)
                ]


evictStaleRequests : { now : Time.Posix } -> Dict Int PendingRequest -> Dict Int PendingRequest
evictStaleRequests { now } =
    let
        oneMinute =  60000
        runningTime req = Time.posixToMillis now - Time.posixToMillis req.startedAt
    in
    Dict.foldl
    (\k req acc ->
        if runningTime req > oneMinute then
            acc
        else
            Dict.set k req acc
    )
    Dict.empty



update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    let
        noop = { model = model, command = Cmd.none }
    in
    when msg is
        ServerCreated result ->
            when model.status is
                StartingUp { port_ = port_ } ->
                    when result is
                        Ok server ->
                            { model = { model | status = Running server }
                            , command =
                                [ puts <| "Server booting up!"
                                , puts <| "Listening on port "
                                       ++ blue
                                       ++ (String.fromInt port_)
                                       ++ reset
                                       ++ "!"
                                ]
                                |> Array.map (\f -> f model.stdout)
                                |> Task.sequence
                                |> Task.execute

                            }
                        Err error ->
                            -- let _ = Debug.log "Server error" error in
                            { model = { model | status = StartingUpFailed }
                            , command =
                                Task.succeed {}
                                |> Task.andThen (\{} -> puts (red ++ "Server failed to start" ++ reset) model.stdout)
                                |> Task.andThen (\{} -> Node.exitWithCode 1)
                                |> Task.execute
                            }

                _ -> noop

        StartRequest { req, res } ->
            { model = model
            , command =
                Task.perform
                (\now -> HandleRequest {req = req, res = res, now = now})
                Time.now
            }

        HandleRequest {req, res, now} ->
            let
                newPendingRequests =
                    Dict.set
                        model.nextRequestId
                        { response = res, startedAt = now}
                        (model.pendingRequests |> evictStaleRequests { now = now })

                newModel =
                    { model | nextRequestId = model.nextRequestId + 1
                    , pendingRequests = newPendingRequests
                    }

            in
            when urlToRoute req.url is
                Nothing ->
                    { model = newModel
                    , command =
                        res
                        |> Response.setStatus 404
                        |> Response.send
                    }
                Just route ->
                    { model = newModel
                    , command = serveRequest
                                    { requestId = model.nextRequestId
                                    }
                                    route
                                    req
                                    res
                    }

        GotDbData value ->
            when D.decodeValue dbResponseDecoder value is
                Ok {requestId, payload} ->
                    { model = { model | pendingRequests = Dict.remove requestId model.pendingRequests }
                    , command =
                        sendJsonSuccess
                            { requestId = requestId }
                            model.pendingRequests
                            payload
                    }
                Err err ->
                    -- let _ = Debug.log "GotDbData error!!" err in
                    { model = model
                    , command =
                        puts "GotDbData decoding error!! The connection will be closed on timeout." model.stdout
                        |> Task.execute
                    }

        TimeOut requestId ->
            { model = { model | pendingRequests = Dict.remove requestId model.pendingRequests }
            , command =
                when Dict.get requestId model.pendingRequests is
                    Just {response} ->
                        let _ = Debug.log "Forcing request shutdown" {requestId = requestId} in
                        response
                        |> Response.setStatus 500
                        |> Response.setBody "Timeout"
                        |> Response.send
                    Nothing ->
                        Cmd.none
            }



sendJsonSuccess : { requestId : Int } -> Dict Int PendingRequest -> DbGetPayload -> Cmd Msg
sendJsonSuccess {requestId} pendingRequests payload =
    let
        jsonResponse =
            E.encode 2 <|
                when payload is
                    AllUsers users ->
                        E.array E.string users
    in
    when Dict.get requestId pendingRequests is
        Just {response} ->
            response
            |> Response.setHeader "Content-Type" "application/json"
            |> Response.setBody jsonResponse
            |> Response.send
        Nothing ->
            Cmd.none

